file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with-my_seq)
seq(along.with=my_seq)
seq_along(myseq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char,"james550")
my_name<-c(my_char,"james550")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
mydata
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[C(3,5,7)]
x[3,5,7]
c(x[3],x[5],x[7])
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar'}"]
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.
my_data<-data.frame(patients,my_matrix)
my_data
class(nmy_data)
class(my_data)
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data,cnames)
colnames(my_data)<-cnames
my_data
exit
swirl
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FASLE & FALSE
FALSE & FALSE
TRUE & C(TRUE, FALSE,FALSE)
TRUE & c(TRUE, FALSE,FALSE)
TRUE && c(TRUE, FALSE,FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE,FALSE)
5>8||6!=8&&4>3.9
ISTRUE(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!false)
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first Function!')
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num =5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
telegram
telegram("today","no way")
submit
submit()
submit
submit()
submit()
submit()
submit()
mad_libs(place = "home",adjective="happy",noun = "james")
submit
submit()
"I"%p%"love"%p%"R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
strunclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime((t3,"%B %d, %Y %H:%M"))
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(,t1,units='days')
difftime(Sys.time(,t1,units='days')
)
difftime(Sys.time(,t1,units='days')
difftime(Sys.time(),t1,units='days')
d<-subset(iris,Species="virginica")
d
d<-subset(iris,Species=="virginica",Sepal.Length)
d
mean(d)
mean(as.numeric(d)
)
d<-mean(subset(iris,Species=="virginica",Sepal.Length))
d<-mean(subset(iris,Species=="virginica",Select=Sepal.Length))
class(iris)
colMeans(d)
apply(cluster1,2,mean)
apply(iris,2,mean)
iris
class(d)
mean(d)
mean(d$val)
d<-d[Species=="virginica"]
d<-mean(subset(iris,Species=="virginica",Select=Sepal.Length))
mean(d)
f<-mean(d)
f
View(q18subset)
d<-subset(iris,Species=="virginica",Select=Sepal.Length)
d
mean(d)
colMeans(d)
mean(d[2])
mean(d$Sepal.Length)
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
a<-mtcars[,hp]
a<-mtcars$hp[cyl==8]
a<-mtcars[cyl==8]
a<-mtcars[mtcars$cyl==8]
a<-mean(subset(mtcars,Cyl==8,hp))
a<-mean(subset(mtcars,cyl==8,hp))
a<-subset(mtcars,cyl==8,hp)
a
mean(a)
class(a)
colMeans(a)
b<-subset(mtcars,cyl==4,hp)
colMeans(b)
colMeans(a) - colMeans(b)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag<-colors<-flags[11:17]
flag_colors<-flags[11:17]
flag_colors<-flags[,11:17]
heaad
head(flag_colors)
lapplay(flag_colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(falgs$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$landmass,flags$population,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
mean(iris$Sepal.Length &iris$Species="virginica")
mean(iris$Sepal.Length &iris$Species=="virginica")
mean(iris$Sepal.Length[iris$Species=="virginica"])
rowMeans(iris[,1:4])
apply(iris[,1:4,2,mean])
apply(iris[,1:4],2,mean])
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",q1.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","q1.csv")
q1_data<-fread(q1.csv)
read.csv("q1.csv")
q1_data<-read.csv("qi.csv")
q1_data<-read.csv("q1.csv")
q1_data$VAL
q1_data[val=24]
q1_data[val==24]
dim(subset(q1_data,VAL==24))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",q2_data.xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","q2_data.xlsx")
library(xlsx)
install.packages("xlsx", dependencies = TRUE)
library(xlsx)
read.xlsx("q2_data.xlsx")
read.xlsx("q2_data.xlsx",sheetIndex = 1)
read.xlsx("q2_data.xlsx",sheetIndex = 1,header = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","q2_data.xlsx",mode = 'wb')
read.xlsx("q2_data.xlsx",sheetIndex = 1,header = TRUE)
dat<-read.xlsx("q2_data.xlsx",sheetIndex = 1,header = TRUE,colIndex = 7:15,rowIndex = 18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml","q3_data.xml",mode = 'wb')
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal = true)
xmlTreeParse("q3_data.xml",useInternal = true)
xmlTreeParse("q3_data.xml",useInternal = TRUE)
q3<-xmlTreeParse("q3_data.xml",useInternal = TRUE)
q3
xpathSApply(q3,"//zipcode")
dim(xpathSApply(q3,"//zipcode"))
test<-xpathSApply(q3,"//zipcode",xmlValue)
test
dim(q3[q3=="21231"])
sum(q3 == "21231")
sum(test == "21231")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",q5_data.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","q5_data.csv")
fread("q5_data.csv")
library(data.table)
install.packages("data.table")
library(data.table)
dt<-fread("q5_data.csv")
tryCatch({
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(con)
}, finally = {
close(con)
})
answer4 <- c()
sapply(c(10, 20, 30, 40), function(line) {
answer4 <<- c(answer4, nchar(html[line]))
})
# Expected output:
msg("Characters in the 10th, 20th, 30th and 100th lines of HTML:", paste(as.character(answer4), collapse = ", "))
library(httr)
myapp <- oauth_app("github",
key = "b34aacbc95b25e0394fb",
secret = "581a54028666d13998a2b0d5ea319495bb62673e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
reset
clear
myapp <- oauth_app("github",
key = "b34aacbc95b25e0394fb",
secret = "581a54028666d13998a2b0d5ea319495bb62673e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
library(nlme)
library(lattice)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet,BodyWeight)
library(ggplot2)
library(ggplot2movie)
library(ggplot2movies)
class(xyplot(weight~Time|Diet,BodyWeight))
temp <- tempfile("activity", fileext=c("zip"))
data <- read.table(unz(temp, "activity.csv"), header=T, quote="\"", sep=",")
setwd("C:\Users\James\Downloads\Data_Science_cert\Reproducible Research\week2\RepData_PeerAssessment1")
setwd("C:/Users/James/Downloads/Data_Science_cert/Reproducible Research/week2/RepData_PeerAssessment1")
dir()
temp <- tempfile("activity", fileext=c("zip"))
data <- read.table(unz(temp, "activity.csv"), header=T, quote="\"", sep=",")
data <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
head(data)
data <- read.csv(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
View(data)
View(data)
View(a)
rm data
rm(data)
data <- read.csv(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
spd <- DT[, lapply(.SD, sum), by = date]
spd <- data[, lapply(.SD, sum), by = date]
dates<-unique(data$date)
dates
dates<-aggregate(data$date, by=list(Category=data$date), FUN=sum)
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum)
dates
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum(na.rm=T))
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum(na.rm=T)na.action = na.omit)
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum(na.rm=T), na.action = na.omit)
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum, na.action = na.omit)
dates<-aggregate(data$steps, by=list(Category=data$date), FUN=sum, na.rm=TRUE, na.action=NULL)
dates
data
hist(dates$x)
dates<-aggregate(data$steps, by=list(date=data$date), FUN=sum, na.rm=TRUE, na.action=NULL)
head(dates)
dates<-aggregate(data$steps, data=data, FUN=sum, na.rm=TRUE, na.action=NULL)
dates<-aggregate(steps~data, data=data, FUN=sum, na.rm=TRUE, na.action=NULL)
dates<-aggregate(steps~date, data=data, FUN=sum, na.rm=TRUE, na.action=NULL)
hist(dates)
hist(dates$steps)
head(dates)
intervals<-aggregate(steps~interval, data=data, FUN=mean, na.rm=TRUE, na.action=NULL)
plot(steps~interval,data=intervals,type=1)
plot(steps~interval,data=intervals,type="1")
intervals[which.max(stepsInterval$steps),]$interval
intervals[which.max(Interval$steps),]$interval
intervals[which.max(intervals$steps),]$interval
intervals[which.max(intervals$steps),]$interval
intervals[which.max(intervals$steps),]$interval
head(interval\)
head(intervals)
plot(steps~interval,data=intervals,type="1")
plot(steps~interval,data=intervals)
plot(steps~interval,data=intervals, type = "l")
sapply(data, function(x) sum(is.na(x)))
rna <- data
rna[is.na(rna)] <- 0
sapply(rna, function(x) sum(is.na(x)))
rna$day<-"weekday"
head(rna)
rna$day[as.POSIXlt(rna$date)$wday==1:5]<-"weekend"
rna$day[as.POSIXlt(rna$date)$wday>0 & as.POSIXlt(rna$date)$wday<6]<-"weekend"
head(rna)
table(rna$day)
library(lattice)
xyplot(steps~interval|factor(day),data=rna,aspect=1/2,type="l")
